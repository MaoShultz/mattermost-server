#!/usr/bin/env groovy

@Library('shared-pipelines') _
import org.mattermost.Utils
import java.util.*;
def utils = new org.mattermost.Utils()
def rnd = UUID.randomUUID().toString()

pipeline {
    agent {
        label 'default-mm-builder'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '3'))
        timeout(time: 1, unit: 'HOURS')
    }

    environment {
        COMPOSE_PROJECT_NAME="${rnd}-${env.BUILD_NUMBER}"
    }

    stages {
        stage('Setup') {
            steps {
                script {
                    utils.stopOldBuilds()
                }
                cleanWs notFailBuild: true
                sh """
                    mkdir -p src/github.com/mattermost/mattermost-server
                    mkdir -p src/github.com/mattermost/mattermost-webapp
                    mkdir -p src/github.com/mattermost/enterprise
                """
                dir('src/github.com/mattermost/mattermost-server') {
                    checkout scm
                }
                dir('src/github.com/mattermost/mattermost-webapp') {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '310159d3-f7c5-4f5d-bfa1-151e3ef2db57', url: 'https://github.com/mattermost/mattermost-webapp.git']]]
                }
                dir('src/github.com/mattermost/enterprise') {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '310159d3-f7c5-4f5d-bfa1-151e3ef2db57', url: 'https://github.com/mattermost/enterprise.git']]]
                }
                dir('src/github.com/mattermost/enterprise') {
                    ansiColor('xterm') {
                        sh """
                            #!/bin/bash -ex
                            git checkout $env.BRANCH_NAME || git checkout $env.CHANGE_BRANCH || git checkout $env.GIT_BRANCH || git checkout $env.CHANGE_TARGET || git checkout master || echo 1
                            export EE_GIT_COMMIT=\$(git rev-parse HEAD)

                            echo EE Commit: \${EE_GIT_COMMIT}
                        """
                    }
                }
                dir('src/github.com/mattermost/mattermost-webapp') {
                    withDockerContainer(args: '', image: 'mattermost/mattermost-build-webapp:oct-2-2018') {
                        ansiColor('xterm') {
                            sh """
                                #!/bin/bash -ex
                                git checkout $env.BRANCH_NAME || git checkout $env.CHANGE_BRANCH || git checkout $env.GIT_BRANCH || git checkout $env.CHANGE_TARGET || git checkout master
                                rm -rf ./dist
                                export WEBAPP_GIT_COMMIT=\$(git rev-parse HEAD)

                                echo Webapp Commit: \${WEBAPP_GIT_COMMIT}

                                curl -f -o ./dist.tar.gz https://releases.mattermost.com/mattermost-webapp/commit/\${WEBAPP_GIT_COMMIT}/mattermost-webapp.tar.gz && mkdir ./dist && tar -xvf ./dist.tar.gz -C ./dist --strip-components=1 || make node_modules test build
                            """
                        }
                    }
                }
            }
        }

        stage('Build') {
            environment {
                GOPATH = "/go"
            }

            steps {
                withDockerContainer(args: '-u root --privileged -v ${WORKSPACE}/src:/go/src/', image: 'mattermost/mattermost-build-server:feb-28-2019') {
                    ansiColor('xterm') {
                        sh """
                            cd /go/src/github.com/mattermost/mattermost-server
                            make config-reset
                            make check-style BUILD_NUMBER='${BRANCH_NAME}-${BUILD_NUMBER}'
                            make build BUILD_NUMBER='${BRANCH_NAME}-${BUILD_NUMBER}'
                            make package BUILD_NUMBER='${BRANCH_NAME}-${BUILD_NUMBER}'
                        """
                    }
                }
            }
        }

        stage('Push to S3') {
            stages {
                stage('Pull request') {
                    when {
                        allOf {
                            expression { env.CHANGE_ID != null }
                            expression { env.CHANGE_TARGET != null }
                        }
                    }
                    steps {
                        dir('src/github.com/mattermost/mattermost-server/dist') {
                            step([$class: 'S3BucketPublisher', dontWaitForConcurrentBuildCompletion: false, entries: [[
                                bucket: "releases.mattermost.com/mattermost-platform-pr/${CHANGE_ID}",
                                excludedFile: '',
                                flatten: true,
                                gzipFiles: false,
                                keepForever: false,
                                managedArtifacts: false,
                                noUploadOnFailure: true,
                                selectedRegion: 'us-east-1',
                                showDirectlyInBrowser: false,
                                sourceFile: '*.tar.gz',
                                storageClass: 'STANDARD',
                                uploadFromSlave: false,
                                useServerSideEncryption: false,
                                userMetadata: [[key: 'Cache-Control', value: 'no-cache']]
                            ], [
                                bucket: "releases.mattermost.com/mattermost-platform-pr/${CHANGE_BRANCH}",
                                excludedFile: '',
                                flatten: true,
                                gzipFiles: false,
                                keepForever: false,
                                managedArtifacts: false,
                                noUploadOnFailure: true,
                                selectedRegion: 'us-east-1',
                                showDirectlyInBrowser: false,
                                sourceFile: '*.tar.gz',
                                storageClass: 'STANDARD',
                                uploadFromSlave: false,
                                useServerSideEncryption: false,
                                userMetadata: [[key: 'Cache-Control', value: 'no-cache']]
                            ]], profileName: 'Releases', userMetadAta: []])
                        }
                    }
                }
                stage('Branch') {
                    when {
                        expression { env.CHANGE_ID == null }
                    }
                    steps {
                        dir('src/github.com/mattermost/mattermost-server/dist') {
                            step([$class: 'S3BucketPublisher', dontWaitForConcurrentBuildCompletion: false, entries: [[
                                bucket: "releases.mattermost.com/mattermost-platform-pr/${BRANCH_NAME}",
                                excludedFile: '',
                                flatten: true,
                                gzipFiles: false,
                                keepForever: false,
                                managedArtifacts: false,
                                noUploadOnFailure: true,
                                selectedRegion: 'us-east-1',
                                showDirectlyInBrowser: false,
                                sourceFile: '*.tar.gz',
                                storageClass: 'STANDARD',
                                uploadFromSlave: false,
                                useServerSideEncryption: false,
                                userMetadata: [[key: 'Cache-Control', value: 'no-cache']]
                            ]], profileName: 'Releases', userMetadAta: []])
                        }
                    }
                }
            }
        }

        stage('Clean checkout') {
            when {
                expression { env.CHANGE_ID != null }
            }
            // We need to perform a clean checkout here to ge the original git commit hash from the PR
            // Jenkins now merges master in top of the PR and this generate a new git hash
            // We need to do that to build the docker image based on the original git commit and then this will be used by
            // mattermod to update the test server.
            steps {
                sh """
                    mkdir -p /tmp/mattermost-server
                """
                dir('/tmp/mattermost-server') {
                    checkout([$class: 'GitSCM', branches: [[name: 'FETCH_HEAD']],
                        doGenerateSubmoduleConfigurations: false, extensions: [],
                        submoduleCfg: [], userRemoteConfigs:  [
                        [refspec: "+refs/pull/${CHANGE_ID}/head:refs/remotes/origin/PR-${CHANGE_ID}",
                        credentialsId: "310159d3-f7c5-4f5d-bfa1-151e3ef2db57",url: "https://github.com/mattermost/mattermost-server.git"]]])
                    sh 'git rev-parse --short HEAD'
                }
            }
        }

        stage('Build Docker Image') {
            environment {
                GIT_COMMIT_SHORT = sh(
                    script: "cd /tmp/mattermost-server && printf \$(git rev-parse --short HEAD)",
                    returnStdout: true
                )
            }
            when {
                expression { env.CHANGE_ID != null }
            }
            steps {
                dir('src/github.com/mattermost/mattermost-server') {
                    withCredentials([usernamePassword(credentialsId: 'matterbuild-docker-hub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'docker login --username ${DOCKER_USER} --password ${DOCKER_PASS}'
                        sh """
                            docker build --no-cache --build-arg MM_PACKAGE=https://releases.mattermost.com/mattermost-platform-pr/${CHANGE_ID}/mattermost-enterprise-linux-amd64.tar.gz -t mattermost/mattermost-enterprise-edition:${GIT_COMMIT_SHORT} build
                            docker push mattermost/mattermost-enterprise-edition:${GIT_COMMIT_SHORT}
                            docker logout
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            dir('src/github.com/mattermost/mattermost-server/build') {
                ansiColor('xterm') {
                    sh """
                        # Capture docker logs
                        docker-compose logs --tail="all" -t --no-color > docker-compose_logs
                        docker ps -a --no-trunc > docker_ps
                        docker stats -a --no-stream > docker_stats
                        tar -czvf docker_logs.tar.gz docker-compose_logs docker_ps docker_stats

                        docker-compose --no-ansi down -v
                    """
                }
                archiveArtifacts 'docker_logs.tar.gz'
            }
        }
        cleanup {
            cleanWs notFailBuild: true
        }
    }
}
